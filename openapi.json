{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "bang-jmbzuf.turbo360-vertex.com",
  "basePath": "/api",
  "info": {
    "description": "A prototype implementation of [this spec](http://www.synergistech.com/bang-leader.html)\n\n# Introduction\nThis documentation is for a prototype build of the Bay Area Networking Guide \n(BANG).  It is fully functional, though populated with placeholder data and \nnot deployed to a production environment.  Further, the NoSQL database used \nis likely a poor fit and the database schema itself could use considerable \ndevelopment.  There is no frontend or much in the way of input validation, as \nthe primary purpose of the prototype was to raise a fully functional API as \nsomething unique to be documented.\n\n# Specification\nA sketch of the minimum specification is given [here](http://www.synergistech.com/bang-leader.html):\n> At a minimum, the next edition should contain the following information:\n> - the company's name, physical address, switchboard telephone and main fax numbers, main and employment-related URLs, and a brief description of its products and/or services\n> - whether there's a formal in-house technical publications, training, or marketing communications service (and if not, is there a need for a contract solution)\n> - the titles, contact information, and key responsibilities of any technical communications department managers\n> - which tools are in use in technical communications department(s)\n> - whether the company creates content for a global audience\n> - the credentials the company typically seeks in its candidates\n\nFollowing that specification in an overly literal way, gives us:\n```\n{\n   \"name\": \"ABC, Inc.\",\n   \"address\": \"12345 Main Street; Cityville, CA\",\n   \"phone\": \"(112) 358-1321\",\n   \"fax\": \"(314) 159-2653\",\n   \"mainUrl\": \"https: //abcinc.com\",\n   \"employmentUrl\": \"https: //abcinc.com/careers\",\n   \"description\": \"ABC makes products and offers services.\",\n   \"techPub\": \"Yes\",\n   \"training\": \"No\",\n   \"marketing\": \"Needed\",\n   \"managers\": [\n      {\n         \"name\": \"Jane Thomas\",\n         \"title\": \"Director of Technical Communication\",\n         \"contactInfo\": \"jane.thomas@abcinc.com\",\n         \"reponsibilities\": \"Directs team of technical writers.\"\n      },\n      {\n         \"name\": \"Thomas Jane\",\n         \"title\": \"Manager of Technical Communication\",\n         \"contactInfo\": \"tom.jane@abcinc.com\",\n         \"reponsibilities\": \"Manages team of technical writers.\"\n      }\n   ],\n   \"tools\": [\n      \"DITA\",\n      \"MadCap Flare\"\n   ],\n   \"global\": true,\n   \"credentials\": [\n      \"STC Practitioner Certificate\",\n      \"STC Expert Certificate\"\n   ]\n}\n```\n(https://raw.githubusercontent.com/brandondavid/BANG/master/seed/company.json)\n\nOf course, it would be far preferable to have Managers, Tools, and \nCredentials as their own data structures so that they could be used \nindependently of any company.  This would also imply that a better \nbackend would involve a RDBMS.\n\n\n# Architecture\n\nThe database is a MongoDB sandbox hosted on AWS through mLab.\n\nExpress.js is used as a web application framework, which greatly \nfacilitates the webapp being RESTful, which makes it easy to have \na REST API.\n\nThe API itself is written in Node.js, which means BANG is most of \nthe way to using the classic MEAN (or MERN) stack.  However, the \ntemplating engine is simply Mustache to avoid unnecessary overhead.\n\nThe entire application is deployed to AWS through Turbo360 and \navailable at [https://bang-jmbzuf.turbo360-vertex.com/](https://bang-jmbzuf.turbo360-vertex.com/)\n\n\n# Data    \nPlaceholder data was generated using [this template](https://github.com/brandondavid/BANG/blob/master/seed/json-generator.md) on \nVazha Omanashvili's [JSON Generator](https://www.json-generator.com).\n\nThe output required some cleanup, using the Python script located at LINK\n",
    "version": "0.1.0",
    "title": "Bay Area Networking Guide",
    "x-logo": {
      "url": "https://apis.guru/openapi-template/logo.png"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "API",
      "description": "API Documentation"
    }
  ],
  "paths": {
    "/company": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Return all companies",
        "description": "Find all companies and return them.",
        "operationId": "getCompany",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            },
            "examples": {
              "application/json": {
                "username": "user1",
                "email": "user@example.com"
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Add a company",
        "description": "Create a new company.",
        "operationId": "postCompany",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/company/{id}": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Return a company",
        "description": "Find a specified company and return it.",
        "operationId": "getCompanyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            },
            "examples": {
              "application/json": {
                "username": "user1",
                "email": "user@example.com"
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "API"
        ],
        "summary": "Edit a company",
        "description": "Overwrite a specified company with new data.",
        "operationId": "putCompanyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            },
            "examples": {
              "application/json": {
                "username": "user1",
                "email": "user@example.com"
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Remove a company",
        "description": "Delete a specified company from the database.",
        "operationId": "deleteCompanyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company to be removed.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            },
            "examples": {
              "application/json": {
                "username": "user1",
                "email": "user@example.com"
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Company": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The company's name.",
          "type": "string"
        },
        "address": {
          "description": "Physical address.",
          "type": "string",
          "format": "address"
        },
        "phone": {
          "description": "Switchboard telephone number.",
          "type": "string",
          "format": "phone"
        },
        "fax": {
          "description": "Main fax number.",
          "type": "string",
          "format": "phone"
        },
        "mainUrl": {
          "description": "Main URL.",
          "type": "string",
          "format": "url"
        },
        "employmentUrl": {
          "description": "Employment-related URL.",
          "type": "string",
          "format": "url"
        },
        "description": {
          "description": "Brief description of its products and/or services.",
          "type": "string"
        },
        "techPub": {
          "description": "Whether there's a formal in-house technical publications service.",
          "type": "string",
          "enum": [
            "Yes",
            "No",
            "Needed"
          ]
        },
        "training": {
          "description": "Whether there's a formal in-house training service.",
          "type": "string",
          "enum": [
            "Yes",
            "No",
            "Needed"
          ]
        },
        "marketing": {
          "description": "Whether there's a formal in-house marketing communications service.",
          "type": "string",
          "enum": [
            "Yes",
            "No",
            "Needed"
          ]
        },
        "managers": {
          "description": "The titles, contact information, and key responsibilities of any technical communications department managers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Manager"
          }
        },
        "tools": {
          "description": "Which tools are in use in technical communications department(s).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tool"
          }
        },
        "global": {
          "description": "Whether the company creates content for a global audience.",
          "type": "boolean"
        },
        "credentials": {
          "description": "The credentials the company typically seeks in its candidates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Credential"
          }
        }
      }
    },
    "Manager": {
      "description": "Technical communications department managers.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Full name of manager.",
          "type": "string",
          "example": "Jane Thomas"
        },
        "title": {
          "description": "Title of manager's position.",
          "type": "string",
          "example": "Director of Technical Communication"
        },
        "contactInfo": {
          "description": "Email address of manager.",
          "type": "string",
          "format": "email",
          "example": "jane.thomas@abcinc.com"
        },
        "responsibilities": {
          "description": "Key responsibilities of manager.",
          "type": "string",
          "example": "Directs team of technical writers."
        }
      }
    },
    "Tool": {
      "description": "A tool in use in a technical communications department.",
      "type": "string",
      "example": "tool example"
    },
    "Credential": {
      "description": "A credential a company typically seeks in its candidates.",
      "type": "string",
      "example": "credential example"
    }
  }
}
